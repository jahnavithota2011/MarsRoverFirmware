#pragma once

#include "CANInterface.h"
#include "CANMsg.h"
#include "hw_bridge.h"

const HWBRIDGE::CANFILTER targetCANIDFilter          = HWBRIDGE::CANFILTER::ARM_RX_FILTER;
const HWBRIDGE::CANID targetReportDiagnosticsCANID   = HWBRIDGE::CANID::ARM_REPORT_DIAGNOSTICS;
const HWBRIDGE::CANSIGNAL targetReportCANStatsSignal = HWBRIDGE::CANSIGNAL::ARM_REPORT_CAN_STATS;

static mbed_error_status_t oneShotHandler(CANMsg& msg);

namespace CANConfig {

using namespace HWBRIDGE;

static CANMsgMap rxStreamedMsgMap = {
    {CANID::ARM_SET_JOINT_POSITION,
     {
         {CANSIGNAL::ARM_SET_TURNTABLE_POSITION, 0},
         {CANSIGNAL::ARM_SET_SHOULDER_POSITION, 0},
         {CANSIGNAL::ARM_SET_ELBOW_POSITION, 0},
         {CANSIGNAL::ARM_SET_LEFT_WRIST_POSITION, 0},
         {CANSIGNAL::ARM_SET_RIGHT_WRIST_POSITION, 0},
         {CANSIGNAL::ARM_SET_CLAW_POSITION, 0},
         {CANSIGNAL::ARM_SET_TOOL_TIP_POSITION, 0},
     }},
    {CANID::ARM_SET_JOINT_ANGULAR_VELOCITY,
     {
         {CANSIGNAL::ARM_SET_TURNTABLE_ANGULAR_VELOCITY, 0},
         {CANSIGNAL::ARM_SET_SHOULDER_ANGULAR_VELOCITY, 0},
         {CANSIGNAL::ARM_SET_ELBOW_ANGULAR_VELOCITY, 0},
         {CANSIGNAL::ARM_SET_LEFT_WRIST_ANGULAR_VELOCITY, 0},
         {CANSIGNAL::ARM_SET_RIGHT_WRIST_ANGULAR_VELOCITY, 0},
         {CANSIGNAL::ARM_SET_CLAW_ANGULAR_VELOCITY, 0},
     }},
    {CANID::ARM_SET_JOINT_CURRENT,
     {
         {CANSIGNAL::ARM_SET_TURNTABLE_CURRENT, 0},
         {CANSIGNAL::ARM_SET_SHOULDER_CURRENT, 0},
         {CANSIGNAL::ARM_SET_ELBOW_CURRENT, 0},
         {CANSIGNAL::ARM_SET_LEFT_WRIST_CURRENT, 0},
         {CANSIGNAL::ARM_SET_RIGHT_WRIST_CURRENT, 0},
         {CANSIGNAL::ARM_SET_CLAW_CURRENT, 0},
     }},
};

static CANMsgMap txStreamedMsgMap = {
    {CANID::ARM_REPORT_JOINT_POSITION,
     {
         {CANSIGNAL::ARM_REPORT_TURNTABLE_POSITION, 0},
         {CANSIGNAL::ARM_REPORT_SHOULDER_POSITION, 0},
         {CANSIGNAL::ARM_REPORT_ELBOW_POSITION, 0},
         {CANSIGNAL::ARM_REPORT_LEFT_WRIST_POSITION, 0},
         {CANSIGNAL::ARM_REPORT_RIGHT_WRIST_POSITION, 0},
         {CANSIGNAL::ARM_REPORT_CLAW_POSITION, 0},
     }},
    {CANID::ARM_REPORT_JOINT_ANGULAR_VELOCITY,
     {
         {CANSIGNAL::ARM_REPORT_TURNTABLE_ANGULAR_VELOCITY, 0},
         {CANSIGNAL::ARM_REPORT_SHOULDER_ANGULAR_VELOCITY, 0},
         {CANSIGNAL::ARM_REPORT_ELBOW_ANGULAR_VELOCITY, 0},
         {CANSIGNAL::ARM_REPORT_LEFT_WRIST_ANGULAR_VELOCITY, 0},
         {CANSIGNAL::ARM_REPORT_RIGHT_WRIST_ANGULAR_VELOCITY, 0},
         {CANSIGNAL::ARM_REPORT_CLAW_ANGULAR_VELOCITY, 0},
     }},
    {CANID::ARM_REPORT_JOINT_CURRENT,
     {
         {CANSIGNAL::ARM_REPORT_TURNTABLE_CURRENT, 0},
         {CANSIGNAL::ARM_REPORT_SHOULDER_CURRENT, 0},
         {CANSIGNAL::ARM_REPORT_ELBOW_CURRENT, 0},
         {CANSIGNAL::ARM_REPORT_LEFT_WRIST_CURRENT, 0},
         {CANSIGNAL::ARM_REPORT_RIGHT_WRIST_CURRENT, 0},
         {CANSIGNAL::ARM_REPORT_CLAW_CURRENT, 0},
     }},
    {CANID::ARM_REPORT_FAULTS,
     {
         {CANSIGNAL::ARM_TURNTABLE_ENCODER_STATE,
          (CANSignalValue_t)ARM_TURNTABLE_ENCODER_STATE_VALUES::ARM_TURNTABLE_ENCODER_STATE_SNA},
         {CANSIGNAL::ARM_TURNTABLE_CURRENT_SENSOR_STATE,
          (CANSignalValue_t)ARM_TURNTABLE_CURRENT_SENSOR_STATE_VALUES::ARM_TURNTABLE_CURRENT_SENSOR_STATE_SNA},
         {CANSIGNAL::ARM_SHOULDER_ENCODER_STATE,
          (CANSignalValue_t)ARM_SHOULDER_ENCODER_STATE_VALUES::ARM_SHOULDER_ENCODER_STATE_SNA},
         {CANSIGNAL::ARM_SHOULDER_CURRENT_SENSOR_STATE,
          (CANSignalValue_t)ARM_SHOULDER_CURRENT_SENSOR_STATE_VALUES::ARM_SHOULDER_CURRENT_SENSOR_STATE_SNA},
         {CANSIGNAL::ARM_ELBOW_ENCODER_STATE,
          (CANSignalValue_t)ARM_ELBOW_ENCODER_STATE_VALUES::ARM_ELBOW_ENCODER_STATE_SNA},
         {CANSIGNAL::ARM_ELBOW_CURRENT_SENSOR_STATE,
          (CANSignalValue_t)ARM_ELBOW_CURRENT_SENSOR_STATE_VALUES::ARM_ELBOW_CURRENT_SENSOR_STATE_SNA},
         {CANSIGNAL::ARM_LEFT_WRIST_ENCODER_STATE,
          (CANSignalValue_t)ARM_LEFT_WRIST_ENCODER_STATE_VALUES::ARM_LEFT_WRIST_ENCODER_STATE_SNA},
         {CANSIGNAL::ARM_LEFT_WRIST_CURRENT_SENSOR_STATE,
          (CANSignalValue_t)ARM_LEFT_WRIST_CURRENT_SENSOR_STATE_VALUES::ARM_LEFT_WRIST_CURRENT_SENSOR_STATE_SNA},
         {CANSIGNAL::ARM_RIGHT_WRIST_ENCODER_STATE,
          (CANSignalValue_t)ARM_RIGHT_WRIST_ENCODER_STATE_VALUES::ARM_RIGHT_WRIST_ENCODER_STATE_SNA},
         {CANSIGNAL::ARM_RIGHT_WRIST_CURRENT_SENSOR_STATE,
          (CANSignalValue_t)ARM_RIGHT_WRIST_CURRENT_SENSOR_STATE_VALUES::ARM_RIGHT_WRIST_CURRENT_SENSOR_STATE_SNA},
         {CANSIGNAL::ARM_CLAW_ENCODER_STATE,
          (CANSignalValue_t)ARM_CLAW_ENCODER_STATE_VALUES::ARM_CLAW_ENCODER_STATE_SNA},
         {CANSIGNAL::ARM_CLAW_CURRENT_SENSOR_STATE,
          (CANSignalValue_t)ARM_CLAW_CURRENT_SENSOR_STATE_VALUES::ARM_CLAW_CURRENT_SENSOR_STATE_SNA},
     }},
    {CANID::ARM_REPORT_DIAGNOSTICS,
     {
         {CANSIGNAL::ARM_REPORT_CAN_STATS, 0},
     }},
};

const static CANMsg::CANMsgHandlerMap rxOneShotMsgHandler = {
    {CANID::ARM_SET_CONTROL_MODE, &oneShotHandler},
    {CANID::ARM_SET_JOINT_PID_PARAMS, &oneShotHandler},
    {CANID::COMMON_SWITCH_CAN_BUS, &oneShotHandler},
};

CANInterface::Config config = {
    // CAN bus pins
    .can1_RX = CAN1_RX,
    .can1_TX = CAN1_TX,
    .can2_RX = CAN2_RX,
    .can2_TX = CAN2_TX,

    // Message maps and handlers
    .rxStreamedMsgMap    = &rxStreamedMsgMap,
    .txStreamedMsgMap    = &txStreamedMsgMap,
    .rxOneShotMsgHandler = &rxOneShotMsgHandler,
};

}  // namespace CANConfig
